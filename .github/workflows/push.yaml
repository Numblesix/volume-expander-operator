name: push
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    name: build
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Download operator sdk
      shell: bash
      env:
        RELEASE_VERSION: v1.1.0
      run: | 
        curl -LO https://github.com/operator-framework/operator-sdk/releases/download/${RELEASE_VERSION}/operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu
        chmod +x operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu
        mkdir ${HOME}/bin
        mv operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu ${HOME}/bin/operator-sdk
        echo "${HOME}/bin" >> $GITHUB_PATH

    - name: Get the version for tags
      id: get_version1
      if: "startsWith(github.ref, 'refs/tags')"
      shell: bash
      run: |
        echo "OPERATOR_IMAGE_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
        echo "BUNDLE_IMAGE_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
        export TAG=${GITHUB_REF/refs\/tags\//}
        echo "BUNDLE_VERSION=${TAG:1}" >> $GITHUB_ENV
        export SEMVER_COMPLIANT=$(echo ${TAG:1} | egrep '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-])(?:\.(?:0|[1-9]\d|\d*[a-zA-Z-][0-9a-zA-Z-]))))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$')
        if [ -z "$SEMVER_COMPLIANT" ]; then   echo "invalid semver tag ${GITHUB_REF/refs\/tags\//}"; exit 1; fi

    - name: Get the version for merge
      id: get_version2
      if: "! startsWith(github.ref, 'refs/tags')"
      shell: bash 
      run: |
        echo "OPERATOR_IMAGE_TAG=latest" >> $GITHUB_ENV
        echo "BUNDLE_IMAGE_TAG=v0.0.0" >> $GITHUB_ENV
        echo "BUNDLE_VERSION=0.0.0" >> $GITHUB_ENV 

    - name: build code
      run:  make
      shell: bash
      
    - name: build bundle
      shell: bash 
      run: make bundle IMG=quay.io/${{ github.actor }}/volume-expander-operator:${OPERATOR_IMAGE_TAG} VERSION=${BUNDLE_VERSION}

    - name: verify bundle
      shell: bash
      run: operator-sdk bundle validate ./bundle --select-optional name=operatorhub

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        registry: quay.io/${{ github.actor }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}      

    - name: "Build and Push Operator Image"
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: "quay.io/${{ github.actor }}/volume-expander-operator:${{ env.OPERATOR_IMAGE_TAG }}"

    - name: "Build and Push Bundle Image"
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./bundle.Dockerfile
        push: true
        tags: "quay.io/${{ github.actor }}/volume-expander-operator-controller-bundle:${{ env.BUNDLE_IMAGE_TAG }}" 

    - name: "Verify bundle image"
      shell: bash
      run: operator-sdk bundle validate quay.io/${{ github.actor }}/volume-expander-operator-controller-bundle:${BUNDLE_IMAGE_TAG} --select-optional name=operatorhub    
      
  release-helm-chart:
    name: Helm Chart Release      
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags')"
    needs: ["build"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: build chart
        shell: bash
        run: make helmchart VERSION=${VERSION} IMG=quay.io/${{ github.actor }}/volume-expander-operator:${version}
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.0.0
        with:
          charts_dir: ./charts
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"        




  release-github:
    name: GitHub Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags')"
    needs: ["build"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: Generate Changelog
        run: |
          LATEST_TAG=$(git tag --sort=creatordate | sed '$!d')
          PREVIOUS_TAG=$(git tag --sort=creatordate | sed 'x;$!d')
          if [ -z "${PREVIOUS_TAG}" ]; then
            REV_RANGE=${LATEST_TAG}
          else
            REV_RANGE=${PREVIOUS_TAG}..${LATEST_TAG}
          fi
          git log --pretty=format:"- %s %H (%aN)" --no-merges ${REV_RANGE} > ${VERSION}-CHANGELOG.txt
          cat ${VERSION}-CHANGELOG.txt
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ steps.get_version.outputs.VERSION }}-CHANGELOG.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        